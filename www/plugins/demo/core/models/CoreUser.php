<?php


namespace Demo\Core\Models;


use Backend\Models\User;
use Backend\Models\UserGroup;
use Backend\Models\UserPreference;
use Backend\Traits\PreferenceMaker;
use Demo\Core\Classes\Utils\ModelUtil;
use Demo\Core\Services\SecurityService;
use Config;

class CoreUser extends User
{
    use PreferenceMaker;

    public $table = 'backend_users';
    /**
     * Relations
     */
    public $belongsToMany = [
        'groups' => [
            CoreUserGroup::class,
            'table' => 'backend_users_groups',
            'key' => 'user_id',
            'otherKey' => 'user_group_id'
        ],
        'roles' => [
            Role::class,
            'table' => 'demo_core_user_role_associations',
            'key' => 'user_id',
            'otherKey' => 'role_id'
        ]
    ];
    /**@var User */
    protected $backendUser;

    /**@param $backendUser User */
    public function setUser($backendUser)
    {
        $this->backendUser = $backendUser;
    }

    public function beforeCreate()
    {
        parent::beforeCreate(); // TODO: Change the autogenerated stub
        $this->role_id = 5; // CRM user role id
    }

    public function beforeSave()
    {
        ModelUtil::fillDefaultColumnsInBelongsToMany($this->roles(), $this->roles, $this->engine_application_id);
        // TODO : for now setting date and plugin nullable in demo_core_role_permission_associations
        parent::beforeSave();
    }

    /**@param $application EngineApplication */
    public function setUserApplication($application)
    {
        $this->putUserPreference('engine_application_id', $application->id);
    }

    /**unique id for pref table*/
    public function getId()
    {
        return 'engine';
    }

    /**@return string Application id for the current user */
    public function getUserApplicationId()
    {
        $appId = $this->getUserPreference('engine_application_id');
        if (empty($appId)) {
            $appId = EngineSettings::get('default_application_id');
        }
        return $appId;
    }

    public function saveSetting($settings = [])
    {
        foreach ($settings as $key => $setting) {
            $this->putUserPreference($key, $setting);
        }
    }
}
