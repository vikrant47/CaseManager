<?php
$modelInstance = new \Demo\Core\Models\ModelModel();
if ($fetchModelFromField === false) {
    $modelInstance->model = $modelType;
} else {

}

?>
<input id="<?= $id ?>-input" name="<?= $name ?>" type="hidden" value="<?= $value ?>"/>
<div id="<?= $id ?>"></div>
<script>
    var sql_import_export = $('<div/>').html('<?=e($value)?>').html().trim();
    var definition = <?=json_encode($modelInstance->getDefinition())?>;
    if(definition) {
        var mongo_import_export = {
            "$and": [{
                "price": {"$lt": 10.25}
            }, {
                "$or": [{
                    "category": 2
                }, {
                    "category": 1
                }]
            }]
        };
        console.log(definition);
        var $queryBuilder = $('#<?=$id?>');
        if ($queryBuilder.queryBuilder && $queryBuilder.queryBuilder.destroy) {
            $queryBuilder.queryBuilder.destroy();
        }
        $queryBuilder.queryBuilder({
            plugins: [
                'bt-tooltip-errors',
                'not-group'
            ],

            filters: Engine.instance.mapFieldsToQueryBuilderFields(definition)/*[{
            id: 'name',
            label: 'Name',
            type: 'string'
        }, {
            id: 'category',
            label: 'Category',
            type: 'integer',
            input: 'select',
            values: {
                1: 'Books',
                2: 'Movies',
                3: 'Music',
                4: 'Tools',
                5: 'Goodies',
                6: 'Clothes'
            },
            operators: ['equal', 'not_equal', 'in', 'not_in', 'is_null', 'is_not_null']
        }, {
            id: 'in_stock',
            label: 'In stock',
            type: 'integer',
            input: 'radio',
            values: {
                1: 'Yes',
                0: 'No'
            },
            operators: ['equal']
        }, {
            id: 'price',
            label: 'Price',
            type: 'double',
            validation: {
                min: 0,
                step: 0.01
            }
        }, {
            id: 'id',
            label: 'Identifier',
            type: 'string',
            placeholder: '____-____-____',
            operators: ['equal', 'not_equal'],
            validation: {
                format: /^.{4}-.{4}-.{4}$/
            }
        }]*/
        });
        $queryBuilder.on('rulesChanged.queryBuilder', function (e, level) {
            try {
                var sql = $(this).queryBuilder('getSQL') || {};
                if (!sql.sql) {
                    // TODO : prevent form to be submitted
                }
                $('#<?=$id?>-input').val(sql.sql);
            } catch (e) {
                console.error(e);
            }
        });
        if (sql_import_export.trim().length > 0) {
            $queryBuilder.queryBuilder('setRulesFromSQL', sql_import_export);
        }


        /* $('#btn-reset').on('click', function () {
             $('#builder-import_export').queryBuilder('reset');
         });

         $('#btn-set-sql').on('click', function () {
             $('#builder-import_export').queryBuilder('setRulesFromSQL', sql_import_export);
         });

         $('#btn-set-mongo').on('click', function () {
             $('#builder-import_export').queryBuilder('setRulesFromMongo', mongo_import_export);
         });

         $('#btn-get-sql').on('click', function () {
             var result = $('#builder-import_export').queryBuilder('getSQL', 'question_mark');

             if (result.sql.length) {
                 alert(result.sql + '\n\n' + JSON.stringify(result.params, null, 2));
             }
         });

         $('#btn-get-mongo').on('click', function () {
             var result = $('#builder-import_export').queryBuilder('getMongo');

             if (!$.isEmptyObject(result)) {
                 alert(JSON.stringify(result, null, 2));
             }
         });*/
    }
</script>
<style>
    .query-builder .rules-group-container {
        background: rgb(249, 249, 249);
    }
</style>