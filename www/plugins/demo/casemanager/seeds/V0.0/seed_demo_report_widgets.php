<?php
namespace Demo\Casemanager\Seeds;

use Schema;
use Seeder;
use Demo\Core\Classes\Ifs\Seedable;
use Db;

/**Auto generated using cmd _: php artisan core:run-seeds casemanager d */
class SeedDemoReportWidgets implements Seedable
{
    /**This will be executed to install seeds*/
    public function install()
    {
            Db::table('demo_report_widgets')->insert([
            [
                                                                            "id"=>"44778960-b508-11ea-bbc1-096310b9696e",
                                                                                        "created_at"=>"2020-06-23 04:16:10",
                                                                                        "updated_at"=>"2020-06-23 05:21:39",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Agent Productivity - {{db.query('backend_user').where('id',request.param.userId).first()}}",
                                                                                        "code"=>"agent-productivity-dbquerybackend_userwhereidrequestparamuseridfirst",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"return [\r\n    'data'=> \$context->evalSql('SELECT * from backend_user where id = {{request.param.userId}}'),\r\n    'user'=> Db::table('backend_user')->where('id',\$context->request->get('userId')),\r\n];",
                                                                                        "script"=>"this.header.setTitle(this.store.user.email);",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"84383d11-89c6-4dac-906c-bb2b08923b53",
                                                                                        "created_at"=>"2019-12-01 07:42:56",
                                                                                        "updated_at"=>"2020-08-15 18:55:37",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Queue Iteam Bar Chart",
                                                                                        "code"=>"queue-iteam-bar-chart",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"select name, count(*) as value\r\nfrom (select queue.name, item.id as item_id\r\nfrom demo_workflow_tasks item,\r\ndemo_workflow_queues queue\r\nwhere queue.id = item.queue_id) as queue_data\r\ngroup by name",
                                                                                        "script"=>"function () {\r\n    var dom = this.getBody();\r\n    var myChart = echarts.init(dom);\r\n\r\n    option = {\r\n        tooltip: {\r\n            trigger: 'item',\r\n            formatter: \"{a} <br/>{b}: {c} ({d}%)\"\r\n        },\r\n        legend: {\r\n            orient: 'vertical',\r\n            x: 'left',\r\n            // data:['直接访问','邮件营销','联盟广告','视频广告','搜索引擎']\r\n        },\r\n        series: [{\r\n            name: 'Queue',\r\n            type: 'pie',\r\n            // radius: ['50%', '70%'],\r\n            avoidLabelOverlap: false,\r\n            data: this.store.data\r\n        }]\r\n    };\r\n    myChart.setOption(option);\r\n    this.onResize(function () {\r\n        myChart.resize();\r\n    });\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"bcb6afa0-cf55-11ea-b89e-1bc335cab1f4",
                                                                                        "created_at"=>"2020-07-26 15:36:13",
                                                                                        "updated_at"=>"2020-08-23 07:31:31",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"User Report",
                                                                                        "code"=>"user-report",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"select usr.first_name as name ,count(transition.*) as total_reviewed,\r\n       count(witems.*) as total_pending,sum(case\r\n             when transition.backward_direction\r\n                     then 1\r\n             else 0\r\n               end)        as backward_direction_count\r\nfrom demo_workflow_workflow_transitions transition\r\n       left join backend_users usr on transition.created_by_id = usr.id\r\n       left join demo_workflow_workflow_items witems on witems.assigned_to_id = usr.id group by usr.id\r\nhaving usr.id={{currentUser.id}}",
                                                                                        "script"=>"function() {\r\n    var dom = this.getBody();\r\n    var myChart = echarts.init(dom);\r\n    debugger\r\n    var storedata = genData(this.store.data);\r\n\r\n    option = {\r\n        title: {\r\n            text: 'User Case Report',\r\n            subtext: 'User Name : ' + this.store.data[0].name,\r\n            left: 'center'\r\n        },\r\n        tooltip: {\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n        },\r\n        legend: {\r\n            orient: 'vertical',\r\n            left: 'left',\r\n            //data: ['Pending']\r\n        },\r\n        series: [{\r\n            name: 'User',\r\n            type: 'pie',\r\n            radius: '55%',\r\n            center: ['50%', '60%'],\r\n            data: storedata.seriesData,\r\n            emphasis: {\r\n                itemStyle: {\r\n                    shadowBlur: 10,\r\n                    shadowOffsetX: 0,\r\n                    shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                }\r\n            }\r\n        }]\r\n    };\r\n    myChart.setOption(option);\r\n    this.onResize(function() {\r\n        myChart.resize();\r\n    });\r\n\r\n    function genData(data) {\r\n        debugger\r\n        var nameList = ['total_pending', 'total_reviewed'];\r\n\r\n        var seriesData = [];\r\n        var selected = {};\r\n        for (var i = 0; i < data.length; i++) {\r\n            seriesData.push({\r\n                name: \"Pending\",\r\n                value: data[i].total_pending,\r\n            });\r\n            seriesData.push({\r\n                name: \"Reviewed\",\r\n                value: data[i].total_reviewed,\r\n            });\r\n            seriesData.push({\r\n                name: \"Rejected\",\r\n                value: data[i].backward_direction_count,\r\n            });\r\n            seriesData.push({\r\n                name: \"Picked\",\r\n                value: data[i].total_reviewed + data[i].total_pending,\r\n            });\r\n            seriesData.push({\r\n                name: \"pushed\",\r\n                value: data[i].total_reviewed - data[i].backward_direction_count,\r\n            });\r\n        }\r\n\r\n        return {\r\n            seriesData: seriesData\r\n        };\r\n    }\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"4b27ac80-ec67-11ea-af77-7b9adf11add3",
                                                                                        "created_at"=>"2020-09-01 15:24:57",
                                                                                        "updated_at"=>"2020-09-01 15:38:41",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Case Priorities Bar Report For All User",
                                                                                        "code"=>"case-priorities-bar-report-all-user",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"select usr.first_name as name ,sum(case\r\n             when transition.name='High'\r\n                     then 1\r\n             else 0\r\n               end)        as High,sum(case\r\n             when transition.name='Normal'\r\n                     then 1\r\n             else 0\r\n               end)        as Normal\r\nfrom demo_casemanager_case_priorities transition\r\n       right join backend_users usr on transition.created_by_id = usr.id group by usr.id",
                                                                                        "script"=>"function() {\r\n    var dom = this.getBody();\r\n    var myChart = echarts.init(dom);\r\n    debugger\r\n    var storedata = genData(this.store.data);\r\n\r\noption = {\r\n    color: ['#003366','#7c0a02','#006699', '#4cabce', '#e5323e',\"#008000\"],\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'shadow'\r\n        }\r\n    },\r\n    legend: {\r\n        data: ['High', 'Normal', 'Medium']\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            axisTick: {show: false},\r\n            data: storedata.xAxisData\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: storedata.seriesData\r\n};\r\nmyChart.setOption(option);\r\n    this.onResize(function() {\r\n        myChart.resize();\r\n    });\r\n\r\n    function genData(data) {\r\n\r\n        var seriesData = [];\r\n		var xAxisData=[];\r\n		var high= [];\r\n		var normal= [];\r\n        for (var i = 0; i < data.length; i++) {\r\n			xAxisData.push(data[i].name);\r\n			high.push(data[i].high);\r\n			normal.push(data[i].normal);\r\n        }\r\n		seriesData.push({\r\n				name: 'High',\r\n				type: 'bar',\r\n				data: high,\r\n				barGap: 0,\r\n				showBackground: true\r\n            });\r\n            seriesData.push({\r\n				name: 'Normal',\r\n				type: 'bar',\r\n				data: normal,\r\n				showBackground: true\r\n            });\r\n        return {\r\n            seriesData: seriesData,\r\n            xAxisData: xAxisData\r\n        };\r\n    }\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"8be0d030-b3d3-11ea-90ed-bfdae0c12a09",
                                                                                        "created_at"=>"2020-06-21 15:26:15",
                                                                                        "updated_at"=>"2020-08-15 18:26:29",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Agent Productivity Report",
                                                                                        "code"=>"agent-productivity-report",
                                                                                        "description"=> "",
                                                                                        "template"=>"<div class=\"row\">\r\n          <div class=\"col-lg-12 col-xl-12 stretch-card\">\r\n            <div class=\"card\">\r\n              <div class=\"card-body\">\r\n                <div class=\"table-responsive\">\r\n                  <table class=\"table table-hover mb-0\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th class=\"pt-0\">Name</th>\r\n                        <th class=\"pt-0\">Email</th>\r\n                        <th class=\"pt-0\">Picked</th>\r\n                        <th class=\"pt-0\">Pushed</th>\r\n                        <th class=\"pt-0\">Rejected</th>\r\n                        <th class=\"pt-0\">Pending</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {%for row in data.data%}\r\n\r\n                      <tr>\r\n                        <td>{{row.first_name}} {{row.last_name}}</td>\r\n                        <td>{{row.email}}</td>\r\n                        <td>{{row.total_reviewed + row.total_pending}}</td>\r\n                        <td>{{row.total_reviewed - row.backward_direction_count}}</td>\r\n                        <td>{{row.backward_direction_count}}</td>\r\n                        <td>{{row.total_pending}}</td>\r\n                      </tr>\r\n                      {%endfor%}\r\n\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>",
                                                                                        "data"=>"select usr.first_name,\r\n       usr.last_name,\r\n       usr.login,\r\n       usr.email,\r\n       sum(case\r\n             when transition.backward_direction\r\n                     then 1\r\n             else 0\r\n               end)        as backward_direction_count,\r\n       count(transition.*) as total_reviewed,\r\n       count(witems.*)     as total_pending\r\nfrom demo_workflow_workflow_transitions transition\r\n       right join backend_users usr on transition.created_by_id = usr.id\r\n       left join demo_workflow_workflow_items witems on witems.assigned_to_id = usr.id\r\ngroup by usr.id",
                                                                                        "script"=>"{\r\n    init: function () {\r\n        var body = this.getBody();\r\n        const widget = this;\r\n        return widget.setFilter({\r\n            hideAction: false, // filter action button\r\n            fields: [{\r\n                label: 'User',\r\n                name: 'usr.id',\r\n                id: 'usr.id',\r\n                type: 'relation',\r\n                association: {\r\n                    model: 'Demo\Core\Models\CoreUser',\r\n                    nameFrom: 'email',\r\n                }\r\n            },{\r\n                label: 'First Name',\r\n                name: 'usr.first_name',\r\n                id: 'usr.first_name',\r\n                type: 'text'\r\n            }],\r\n        });\r\n    },\r\n    render: function () {\r\n        var body = this.getBody();\r\n        const widget = this;\r\n        /*\$(body).addClass('ag-theme-balham');\r\n\r\n        var columnDefs = [{\r\n                headerName: \"SNO\",\r\n                field: \"sno\"\r\n            },\r\n            {\r\n                headerName: \"Name\",\r\n                field: \"name\",\r\n                resizable: true\r\n            },\r\n            {\r\n                headerName: \"Email\",\r\n                field: \"email\",\r\n                resizable: true\r\n            },\r\n            {\r\n                headerName: \"Picked\",\r\n                field: \"picked\",\r\n                resizable: true\r\n            },\r\n            {\r\n                headerName: \"Pushed\",\r\n                field: \"pushed\",\r\n                resizable: true\r\n            },\r\n            {\r\n                headerName: \"Rejected\",\r\n                field: \"rejected\",\r\n                resizable: true\r\n            },\r\n            {\r\n                headerName: \"Pending\",\r\n                field: \"pending\",\r\n                resizable: true\r\n            },\r\n        ];\r\n        var gridOptions = {\r\n            columnDefs: columnDefs,\r\n            rowData: widget.store.data.map(function (record) {\r\n                return {\r\n                    sno: record.sno,\r\n                    email: record.email,\r\n                    name: record.first_name + ' ' + record.last_name,\r\n                    picked: record.total_reviewed + record.total_pending,\r\n                    pushed: record.total_reviewed - record.backward_direction_count,\r\n                    rejected: record.backward_direction_count,\r\n                    pending: record.total_pending\r\n                };\r\n            })\r\n        };*/\r\n\r\n        function autoSizeAll() {\r\n            var allColumnIds = [];\r\n            gridOptions.columnApi.getAllColumns().forEach(function (column) {\r\n                allColumnIds.push(column.colId);\r\n            });\r\n\r\n            gridOptions.columnApi.autoSizeColumns(allColumnIds, false);\r\n        }\r\n        new agGrid.Grid(body, gridOptions);\r\n        if (widget.isInsideDashboard()) {\r\n            autoSizeAll();\r\n        }\r\n    }\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"3da1b840-d976-11ea-ac81-81673f968e2c",
                                                                                        "created_at"=>"2020-08-08 12:54:05",
                                                                                        "updated_at"=>"2020-08-22 15:29:38",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Line Chart User Report",
                                                                                        "code"=>"line-chart-user-report",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"select usr.first_name as name ,count(transition.*) as total_reviewed,\r\n       count(witems.*) as total_pending,sum(case\r\n             when transition.backward_direction\r\n                     then 1\r\n             else 0\r\n               end)        as backward_direction_count\r\nfrom demo_workflow_workflow_transitions transition\r\n       right join backend_users usr on transition.created_by_id = usr.id\r\n       left join demo_workflow_workflow_items witems on witems.assigned_to_id = usr.id group by usr.id",
                                                                                        "script"=>"function() {\r\n    var dom = this.getBody();\r\n    var myChart = echarts.init(dom);\r\n    debugger\r\n    var storedata = genData(this.store.data);\r\n\r\noption = {\r\n    color: ['#003366', '#006699', '#4cabce', '#e5323e',\"#008000\"],\r\n    tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n            type: 'shadow'\r\n        }\r\n    },\r\n    legend: {\r\n        data: ['Pending', 'Reviewed', 'Picked', 'Rejected', 'pushed']\r\n    },\r\n    xAxis: [\r\n        {\r\n            type: 'category',\r\n            axisTick: {show: false},\r\n            data: storedata.xAxisData\r\n        }\r\n    ],\r\n    yAxis: [\r\n        {\r\n            type: 'value'\r\n        }\r\n    ],\r\n    series: storedata.seriesData\r\n};\r\nmyChart.setOption(option);\r\n    this.onResize(function() {\r\n        myChart.resize();\r\n    });\r\n\r\n    function genData(data) {\r\n        debugger\r\n        var nameList = ['total_pending', 'total_reviewed'];\r\n\r\n        var seriesData = [];\r\n        var xAxisData = [];\r\n        var pending = [];\r\n		var reviewed= [];\r\n		var rejected= [];\r\n		var picked= [];\r\n		var pushed= [];\r\n        for (var i = 0; i < data.length; i++) {\r\n			xAxisData.push(data[i].name);\r\n			pending.push(data[i].total_pending);\r\n			reviewed.push(data[i].total_reviewed);\r\n			rejected.push(data[i].backward_direction_count);\r\n			picked.push(data[i].total_reviewed + data[i].total_pending);\r\n			pushed.push(data[i].total_reviewed - data[i].backward_direction_count);\r\n        }\r\n		seriesData.push({\r\n				name: 'Pending',\r\n				type: 'bar',\r\n				data: pending,\r\n				barGap: 0,\r\n				showBackground: true\r\n            });\r\n            seriesData.push({\r\n				name: 'Reviewed',\r\n				type: 'bar',\r\n				data: reviewed,\r\n				showBackground: true\r\n            });\r\n			seriesData.push({\r\n				name: 'Picked',\r\n				type: 'bar',\r\n				data: picked,\r\n				showBackground: true\r\n            });\r\n            seriesData.push({\r\n				name: 'Rejected',\r\n				type: 'bar',\r\n				data: rejected,\r\n				showBackground: true\r\n            });\r\n            seriesData.push({\r\n				name: 'pushed',\r\n				type: 'bar',\r\n				data: pushed,\r\n				showBackground: true\r\n            });\r\n        return {\r\n            seriesData: seriesData,\r\n            xAxisData: xAxisData\r\n        };\r\n    }\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ] ,            [
                                                                            "id"=>"cf470b50-ec63-11ea-a7e9-d9b879d77946",
                                                                                        "created_at"=>"2020-09-01 15:00:01",
                                                                                        "updated_at"=>"2020-10-02 09:40:13",
                                                                                        "created_by_id"=> 1,
                                                                                        "updated_by_id"=> 1,
                                                                                        "name"=>"Case Priorities Bar Report",
                                                                                        "code"=>"case-priorities-report",
                                                                                        "description"=> "",
                                                                                        "template"=> "",
                                                                                        "data"=>"select usr.first_name as name ,sum(case\r\n             when transition.name='High'\r\n                     then 1\r\n             else 0\r\n               end)        as high,sum(case\r\n             when transition.name='Normal'\r\n                     then 1\r\n             else 0\r\n               end)        as normal\r\nfrom demo_casemanager_case_priorities transition\r\n       left join backend_users usr on transition.created_by_id = usr.id group by usr.id\r\nhaving usr.id={{currentUser.id}}",
                                                                                        "script"=>"function() {\r\n    var dom = this.getBody();\r\n    var myChart = echarts.init(dom);\r\n    debugger\r\n    var storedata = genData(this.store.data);\r\n\r\noption = {\r\n    xAxis: {\r\n        type: 'category',\r\n        data: ['High', 'Normal','Medium']\r\n    },\r\n    yAxis: {\r\n        type: 'value'\r\n    },\r\n    series: [{\r\n        data: storedata.seriesData,\r\n        type: 'bar',\r\n        showBackground: true,\r\n        backgroundStyle: {\r\n            color: 'rgba(220, 220, 220, 0.8)'\r\n        }\r\n    }]\r\n};\r\nmyChart.setOption(option);\r\nthis.onResize(function() {\r\n    myChart.resize();\r\n});\r\nfunction genData(data) {\r\n        debugger\r\n\r\n        var seriesData = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n            seriesData.push({\r\n                name: \"High\",\r\n                value: data[i].high,\r\n            });\r\n            seriesData.push({\r\n                name: \"Normal\",\r\n                value: data[i].normal,\r\n            });\r\n        }\r\n\r\n        return {\r\n            seriesData: seriesData\r\n        };\r\n    }\r\n}",
                                                                                        "public"=> false,
                                                                                        "engine_application_id"=>"df07f9b4-26c1-40ca-ba1f-1b77b1692b83",
                                                                                        "active"=> 1
                            ]             ]);
        }

    /**This will be executed to uninstall seeds*/
    public function uninstall()
    {
                    Db::table('demo_report_widgets')->where('engine_application_id', 'df07f9b4-26c1-40ca-ba1f-1b77b1692b83')->delete();
            }
}
