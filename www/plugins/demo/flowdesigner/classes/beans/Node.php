<?php


namespace Demo\Core\FlowDesigner\Classes\Beans;


use Demo\FlowDesigner\Models\NodeModel;
use Illuminate\Support\Collection;

/**
 * Node represent in mxGraph as follows
 * (vertex="1" connectable="0")
 * <mxCell id="29" value="" vertex="1" connectable="0" parent="1">
 * * <mxGeometry x="350" y="80" width="120" height="120" as="geometry">
 * * * <mxRectangle width="120" height="40" as="alternateBounds" />
 * * </mxGeometry>
 * </mxCell>
 *
 */
class Node extends FlowItem
{
    /**
     * @var  string $type name of the node implementer  class , NodeModel, WorkflowState
     */
    protected $modelType;

    /**@var NodeModel $nodeModel */
    protected $nodeModel;

    /**@var string $id of the node model */
    protected $nodeModelId;

    /**@var Collection<Port> $outputPorts */
    protected $outputPorts;

    /**@var Port $inputPort */
    protected $inputPort;

    /**
     * Create nre node
     */
    function __construct()
    {
        parent::__construct();
        $this->outputPorts = collect([]);
    }

    /**@param string $type name of the node implementer  class , NodeModel, WorkflowState */
    public function setModelType($modelType)
    {
        $this->modelType = $modelType;
    }

    /**
     * @param Collection $outputPorts
     */
    public function setOutputPorts(Collection $outputPorts)
    {
        $this->outputPorts = $outputPorts;
    }


    /** Loads the node model from the database */
    public function load()
    {
        $this->nodeModel = $this->modelType::where('id', $this->nodeModelId)->first();
        return $this;
    }

    /**
     * This will return the collection of output ports
     * @return Collection<Port>
     */
    public function getOutputPorts()
    {
        return $this->outputPorts;
    }

    /***@param Port $port */
    public function addOutputPort(Port $port)
    {
        $this->outputPorts->push($port);
    }

    /**
     * This will return the collection of output ports
     * @return Port
     */
    public function getInputPort()
    {
        return $this->inputPort;
    }

    /**
     * @return Collection<Node>
     */
    public function getAllConnectingNodes()
    {
        return $this->getInConnectingNodes()->concat($this->getOutConnectingNodes());
    }

    /**
     * This will returns all the nodes which have been connected to any of the output ports
     * @return Collection<Node>
     */
    public function getOutConnectingNodes()
    {
        $outNodes = collect([]);
        $outPorts = $this->getOutputPorts();
        foreach ($outPorts as $outPort) {
            $edges = $outPort->getEdges();
            foreach ($edges as $edge) {
                $target = $edge->getTargetPort();
                $outNodes->push($target->getParent());
            }
        }
        return $outNodes;
    }

    /**
     * @return Collection<Node>
     */
    public function getInConnectingNodes()
    {
        $inNodes = collect([]);
        $edges = $this->flow->getEdges();
        foreach ($edges as $edge) {
            $source = $edge->getSourcePort();
            $inNodes->push($source->getParent());
        }
        return $inNodes;
    }


    public function unserialize(array $jsonItem)
    {
        parent::unserialize($jsonItem); // TODO: Change the autogenerated stub

    }
}

